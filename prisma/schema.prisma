// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified Boolean
  image         String?
  role          String    @default("user") // user | admin | super_admin
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?
  avatar        String?
  country       String    @default("India")
  phoneNumber         String?   @unique
  phoneNumberVerified Boolean   @default(false)
  sessions      Session[]
  accounts      Account[]
  assignedLeads Lead[]    @relation("AssignedLeads")
  createdLeads  Lead[]    @relation("CreatedLeads")
  notifications Notification[]
  notificationSettings NotificationSettings?

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Lead {
  id               String   @id @default(cuid())
  name             String
  email            String   @unique
  phoneNumber      String?
  destination      String
  origin           String
  weight           Float
  status           LeadStatus @default(NEW)
  country          String   @default("India")
  assignedTo       User?     @relation("AssignedLeads", fields: [assignedToId], references: [id])
  assignedToId     String?
  createdBy        User      @relation("CreatedLeads", fields: [createdById], references: [id])
  createdById      String
  shipment         Shipment?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([email])
  @@index([status])
  @@index([country])
  @@map("lead")
}

model Shipment {
  id                    String          @id @default(cuid())
  leadId                String          @unique
  lead                  Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // White Label Tracking ID
  whiteLabelTrackingId  String          @unique // GT + 8 alphanumeric characters
  
  // Shippo Integration Fields
  shippoTrackingId      String?         // Shippo's internal tracking ID
  trackingNumber        String          // Carrier's tracking number (entered by admin)
  carrier               String          // Carrier name (FedEx, UPS, DHL, etc.)
  serviceType           String?         // Express, Ground, etc.
  
  // Shipment Details
  status                ShipmentStatus  @default(PENDING)
  trackingStatus        String?         // Raw status from Shippo/carrier
  estimatedDelivery     DateTime?
  actualDelivery        DateTime?
  
  // Address Information (from lead or manual entry)
  fromAddress           Json?           // Origin address
  toAddress             Json?           // Destination address
  
  // Package Details
  weight                Float?
  dimensions            Json?           // {length, width, height, unit}
  packageType           String?         // box, envelope, etc.
  
  // Tracking Events (from Shippo webhooks)
  trackingEvents        Json?           // Array of tracking events
  lastTrackedAt         DateTime?
  
  // Metadata
  shippoData            Json?           // Full Shippo response for debugging
  notes                 String?         // Admin notes
  
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  @@index([trackingNumber])
  @@index([whiteLabelTrackingId])
  @@index([status])
  @@index([carrier])
  @@index([estimatedDelivery])
  @@map("shipment")
}

enum LeadStatus {
  NEW
  CONTACTED
  SHIPPED
  FAILED
}

enum ShipmentStatus {
  PENDING       // Shipment created but not yet picked up
  IN_TRANSIT    // Package is on the way
  OUT_FOR_DELIVERY // Package is out for delivery
  DELIVERED     // Package delivered
  EXCEPTION     // Issue with delivery (delay, damage, etc.)
  RETURNED      // Package returned to sender
  CANCELLED     // Shipment cancelled
  UNKNOWN       // Status unknown or not updated
}

model Notification {
  id            String            @id @default(cuid())
  userId        String?
  user          User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification Content
  title         String
  description   String?
  variant       NotificationVariant @default(DEFAULT)
  category      NotificationCategory @default(SYSTEM)
  priority      NotificationPriority @default(NORMAL)
  
  // Notification Behavior
  persistent    Boolean           @default(false)
  channel       NotificationChannel @default(BOTH)
  
  // Status
  read          Boolean           @default(false)
  dismissed     Boolean           @default(false)
  
  // Metadata
  data          Json?             // Additional data for the notification
  actions       Json?             // Actions available for the notification
  groupId       String?           // For grouping similar notifications
  
  // Related entities
  leadId        String?
  shipmentId    String?
  
  // Timestamps
  readAt        DateTime?
  dismissedAt   DateTime?
  expiresAt     DateTime?         // For auto-expiring notifications
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  @@index([userId])
  @@index([category])
  @@index([priority])
  @@index([read])
  @@index([dismissed])
  @@index([createdAt])
  @@index([groupId])
  @@map("notification")
}

model NotificationSettings {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // General Settings
  enabled       Boolean  @default(true)
  
  // Channel Preferences
  toastEnabled  Boolean  @default(true)
  centerEnabled Boolean  @default(true)
  soundEnabled  Boolean  @default(true)
  emailEnabled  Boolean  @default(false)
  
  // Category Settings
  authEnabled     Boolean @default(true)
  systemEnabled   Boolean @default(true)
  userEnabled     Boolean @default(true)
  shipmentEnabled Boolean @default(true)
  adminEnabled    Boolean @default(true)
  leadEnabled     Boolean @default(true)
  
  // Behavior Settings
  groupSimilar    Boolean @default(true)
  maxToasts       Int     @default(5)
  defaultDuration Int     @default(5000)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("notification_settings")
}

model NotificationTemplate {
  id            String            @id @default(cuid())
  name          String            @unique
  category      NotificationCategory
  
  // Template Content
  title         String
  description   String?
  variant       NotificationVariant @default(DEFAULT)
  priority      NotificationPriority @default(NORMAL)
  
  // Template Settings
  persistent    Boolean           @default(false)
  channel       NotificationChannel @default(BOTH)
  
  // Template Variables (for dynamic content)
  variables     Json?             // List of variables that can be replaced
  
  // Status
  active        Boolean           @default(true)
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  
  @@map("notification_template")
}

enum NotificationVariant {
  DEFAULT
  SUCCESS
  ERROR
  WARNING
  INFO
}

enum NotificationCategory {
  AUTH
  SYSTEM
  USER
  SHIPMENT
  ADMIN
  LEAD
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

enum NotificationChannel {
  TOAST
  CENTER
  BOTH
  EMAIL
}
